package net.falappa.swing.text;

import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.font.FontRenderContext;
import java.io.File;
import javax.swing.JFileChooser;

/**
 * A specialized widget for selecting a directory.
 * <p>
 * The widget consists of a non editable textfield to show an ellipsized version of the directory abolute path and of a button recalling a
 * filechooser to select the directory.
 * <p>
 * The widget intercepts <tt>Ctrl + C</tt> to copy the complete path instead of the ellipsized one.
 * <p>
 * @author Alessandro Falappa
 */
public class DirSelectorField extends javax.swing.JPanel {

    private final JFileChooser chooser;
    private File dir;
    private final String ellipsis = "\u2026";
    private boolean cPressed;
    private boolean ctrlPressed;

    /**
     * Default constructor.
     */
    public DirSelectorField() {
        initComponents();
        chooser = new JFileChooser();
        chooser.setDialogTitle("Choose directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                super.componentResized(e);
                if (dir != null) {
                    setTextEllipsized();
                }
            }
        });
    }

    public File getBaseDir() {
        return chooser.getCurrentDirectory();
    }

    public void setBaseDir(File baseDir) {
        chooser.setCurrentDirectory(baseDir);
    }

    public File getDir() {
        return dir;
    }

    public void setDir(File dir) {
        this.dir = dir;
        setTextEllipsized();
    }

    @Override
    public void setEnabled(boolean b) {
        bChoose.setEnabled(b);
        txDir.setEnabled(b);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txDir = new javax.swing.JTextField();
        bChoose = new javax.swing.JButton();

        txDir.setEditable(false);
        txDir.setColumns(10);
        txDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txDirKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txDirKeyReleased(evt);
            }
        });

        bChoose.setText("...");
        bChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txDir, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bChoose))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(bChoose))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bChooseActionPerformed
        if (chooser.showDialog(this, "Choose") == JFileChooser.APPROVE_OPTION) {
            dir = chooser.getSelectedFile();
            setTextEllipsized();
        }
    }//GEN-LAST:event_bChooseActionPerformed

    private void txDirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txDirKeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_C:
                cPressed = false;
                break;
            case KeyEvent.VK_CONTROL:
                ctrlPressed = false;
                break;
        }
    }//GEN-LAST:event_txDirKeyReleased

    private void txDirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txDirKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_C:
                cPressed = true;
                break;
            case KeyEvent.VK_CONTROL:
                ctrlPressed = true;
                break;
        }
        if (ctrlPressed && cPressed) {
            StringSelection data = new StringSelection(dir.getAbsolutePath());
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(data, data);
            evt.consume();
        }
    }//GEN-LAST:event_txDirKeyPressed

    private void setTextEllipsized() {
        final FontRenderContext frc = ((Graphics2D) txDir.getGraphics()).getFontRenderContext();
        final Font font = txDir.getFont();
        int start = dir.getAbsolutePath().length() / 2;
        int end = start;
        final Insets borderInsets = txDir.getBorder().getBorderInsets(txDir);
        final int targetWidth = txDir.getWidth() - borderInsets.left - borderInsets.right;
        String orig = dir.getAbsolutePath();
        StringBuilder sb = new StringBuilder(orig);
        while (font.getStringBounds(sb.toString(), frc).getWidth() > targetWidth) {
            start--;
            end++;
            sb.setLength(0);
            sb.append(orig.substring(0, start)).append(ellipsis).append(orig.substring(end));
        }
        txDir.setText(sb.toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bChoose;
    private javax.swing.JTextField txDir;
    // End of variables declaration//GEN-END:variables
}
