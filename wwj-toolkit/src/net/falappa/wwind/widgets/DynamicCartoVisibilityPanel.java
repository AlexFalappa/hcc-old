package net.falappa.wwind.widgets;

import net.falappa.wwind.utils.ToggleVisibilityAction;
import gov.nasa.worldwind.WorldWindow;
import gov.nasa.worldwind.awt.WorldWindowGLCanvas;
import gov.nasa.worldwind.layers.Earth.BMNGOneImage;
import gov.nasa.worldwind.layers.Earth.NASAWFSPlaceNameLayer;
import gov.nasa.worldwind.layers.Layer;
import gov.nasa.worldwind.layers.LayerList;
import gov.nasa.worldwind.wms.WMSTiledImageLayer;
import java.awt.event.ActionEvent;
import java.util.prefs.Preferences;
import javax.swing.Action;
import javax.swing.JCheckBox;

/**
 * A panel listing and controlling the visibility of {@link BMNGOneImage} and {@link WMSTiledImageLayer} layers in a {@link WWindPanel}.
 * <p>
 * Layers are taken directly from the {@code WWindPanel}.
 *
 * @author Alessandro Falappa
 */
public class DynamicCartoVisibilityPanel extends javax.swing.JPanel {

    private static final String PREFNODE_BASE = "base-carto";

    /**
     * Default constructor.
     */
    public DynamicCartoVisibilityPanel() {
        initComponents();
    }

    /**
     * Attach this component to the given {@link WWindPanel} and populates the panel.
     *
     * @param wwp the WWindPanel to attach to
     */
    public void linkTo(WWindPanel wwp) {
        final WorldWindowGLCanvas wwCanvas = wwp.getWWCanvas();
        LayerList layers = wwCanvas.getModel().getLayers();
        for (Layer l : layers) {
            if (l instanceof BMNGOneImage || l instanceof WMSTiledImageLayer || l instanceof NASAWFSPlaceNameLayer) {
                JCheckBox chkBox = new JCheckBox();
                link(chkBox, wwCanvas, l);
                this.add(chkBox);
            }
        }
    }

    /**
     * Store visibility state under the given preferences node.
     *
     * @param prefs a {@link Preferences} node to write under
     */
    public void storePrefs(Preferences prefs) {
        // create a subnode for view settings
        Preferences vnode = prefs.node(PREFNODE_BASE);
        //TODO store layer enablement
    }

    /**
     * Loads visibility state from the given preferences node and sets it on the linked WWindPanel.
     *
     * @param prefs a {@link Preferences} node to load from under
     */
    public void loadPrefs(Preferences prefs) {
        // get view settings subnode
        Preferences vnode = prefs.node(PREFNODE_BASE);
        //TODO load layer enablement
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createTitledBorder("Base Layers"));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void link(JCheckBox jcb, WorldWindow wwd, Layer layer) {
        if (layer != null) {
            jcb.setSelected(layer.isEnabled());
            jcb.setAction(new ToggleVisibilityAction(layer, wwd));
        } else {
            jcb.setEnabled(false);
        }
    }

    private void putChbInPrefs(JCheckBox chb, Preferences vnode) {
        vnode.putBoolean(chb.getText(), chb.isSelected());
    }

    private void getChbFromPrefs(JCheckBox chb, Preferences vnode, boolean flag) {
        chb.setSelected(vnode.getBoolean(chb.getText(), flag));
        // force action firing
        final Action act = chb.getAction();
        if (act != null) {
            act.actionPerformed(new ActionEvent(chb, 1, "initial"));
        }
    }
}
