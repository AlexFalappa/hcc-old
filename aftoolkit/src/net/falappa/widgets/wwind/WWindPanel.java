/*
 * Copyright 2014 Alessandro Falappa <alex.falappa@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.falappa.widgets.wwind;

import gov.nasa.worldwind.BasicModel;
import gov.nasa.worldwind.awt.WorldWindowGLCanvas;
import gov.nasa.worldwind.event.RenderingExceptionListener;
import gov.nasa.worldwind.exception.WWAbsentRequirementException;
import gov.nasa.worldwind.globes.Earth;
import gov.nasa.worldwind.globes.EarthFlat;
import gov.nasa.worldwind.globes.FlatGlobe;
import gov.nasa.worldwind.globes.Globe;
import gov.nasa.worldwind.layers.LayerList;
import gov.nasa.worldwind.layers.SkyColorLayer;
import gov.nasa.worldwind.layers.SkyGradientLayer;
import gov.nasa.worldwind.layers.ViewControlsLayer;
import gov.nasa.worldwind.layers.ViewControlsSelectListener;
import gov.nasa.worldwind.view.orbit.BasicOrbitView;
import gov.nasa.worldwind.view.orbit.FlatOrbitView;
import gov.nasa.worldwindx.examples.util.StatusLayer;

/**
 *
 * @author afalappa
 */
public class WWindPanel extends javax.swing.JPanel {

    private final Globe roundGlobe = new Earth();
    private final FlatGlobe flatGlobe = new EarthFlat();

    public WWindPanel() {
        initComponents();
        setupWorldWind();
    }

    public WorldWindowGLCanvas getWWCanvas() {
        return wwCanvas;
    }

    private void setupWorldWind() {
        BasicModel model = new BasicModel();
        model.setGlobe(roundGlobe);
        wwCanvas.setModel(model);
        wwCanvas.setSize(400, 300);
        // Register a rendering exception listener
        wwCanvas.addRenderingExceptionListener(new RenderingExceptionListener() {
            @Override
            public void exceptionThrown(Throwable t) {
                if (t instanceof WWAbsentRequirementException) {
                    StringBuilder message = new StringBuilder(
                            "Computer does not meet minimum graphics requirements.\n");
                    message.append("Please install up-to-date graphics driver and try again.\n");
                    message.append("Reason: ").append(t.getMessage());
                    message.append("\nThis program will end when you press OK.");
//                    App.getFrame().showErrorDialog("Unable to Start Program", message.toString(), null);
                    System.exit(-1);
                } else {
                    System.err.println("WorldWind library rendering problem!");
                    t.printStackTrace(System.err);
                }
            }
        });
        LayerList layers = model.getLayers();
        // add a StatusLayer
        StatusLayer slayer = new StatusLayer();
        slayer.setEventSource(wwCanvas);
//        slayer.setDefaultFont(this.getFont());
        layers.add(slayer);
        // add a view controls layer and register a controller for it.
        ViewControlsLayer viewControlsLayer = new ViewControlsLayer();
        layers.add(viewControlsLayer);
        wwCanvas.addSelectListener(new ViewControlsSelectListener(wwCanvas, viewControlsLayer));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rbGlobe = new javax.swing.JRadioButton();
        rbMap = new javax.swing.JRadioButton();
        cbProjection = new javax.swing.JComboBox();
        wwCanvas = new gov.nasa.worldwind.awt.WorldWindowGLCanvas();

        setLayout(new java.awt.BorderLayout());

        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 3, 1);
        flowLayout1.setAlignOnBaseline(true);
        jPanel1.setLayout(flowLayout1);

        jLabel1.setText("Mode");
        jPanel1.add(jLabel1);

        buttonGroup1.add(rbGlobe);
        rbGlobe.setSelected(true);
        rbGlobe.setText("Globe");
        rbGlobe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbGlobeActionPerformed(evt);
            }
        });
        jPanel1.add(rbGlobe);

        buttonGroup1.add(rbMap);
        rbMap.setText("Map");
        rbMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMapActionPerformed(evt);
            }
        });
        jPanel1.add(rbMap);

        cbProjection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mercator", "Lat-Lon" }));
        cbProjection.setEnabled(false);
        cbProjection.setLightWeightPopupEnabled(false);
        cbProjection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbProjectionItemStateChanged(evt);
            }
        });
        jPanel1.add(cbProjection);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
        add(wwCanvas, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void rbGlobeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbGlobeActionPerformed
        cbProjection.setEnabled(false);
        setFlatGlobe(false);
        wwCanvas.redraw();
    }//GEN-LAST:event_rbGlobeActionPerformed

    private void rbMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMapActionPerformed
        cbProjection.setEnabled(true);
        setFlatGlobe(true);
        wwCanvas.redraw();
    }//GEN-LAST:event_rbMapActionPerformed

    private void cbProjectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbProjectionItemStateChanged
        switch (cbProjection.getSelectedIndex()) {
            case 0:
                // mercator
                flatGlobe.setProjection(FlatGlobe.PROJECTION_MERCATOR);
                break;
            case 1:
                // equirectangular
                flatGlobe.setProjection(FlatGlobe.PROJECTION_LAT_LON);
                break;
        }
        wwCanvas.redraw();
    }//GEN-LAST:event_cbProjectionItemStateChanged

    private void setFlatGlobe(boolean flat) {
        if (!flat) {
            // Switch to round globe
            wwCanvas.getModel().setGlobe(roundGlobe);
            // Switch to orbit view and update with current position
            FlatOrbitView flatOrbitView = (FlatOrbitView) wwCanvas.getView();
            BasicOrbitView orbitView = new BasicOrbitView();
            orbitView.setCenterPosition(flatOrbitView.getCenterPosition());
            orbitView.setZoom(flatOrbitView.getZoom());
            orbitView.setHeading(flatOrbitView.getHeading());
            orbitView.setPitch(flatOrbitView.getPitch());
            wwCanvas.setView(orbitView);
            // Change sky layer
            LayerList layers = wwCanvas.getModel().getLayers();
            for (int i = 0; i < layers.size(); i++) {
                if (layers.get(i) instanceof SkyColorLayer) {
                    layers.set(i, new SkyGradientLayer());
                }
            }
        } else {
            // Switch to flat globe
            wwCanvas.getModel().setGlobe(flatGlobe);
            cbProjectionItemStateChanged(null);
            // Switch to flat view and update with current position
            BasicOrbitView orbitView = (BasicOrbitView) wwCanvas.getView();
            FlatOrbitView flatOrbitView = new FlatOrbitView();
            flatOrbitView.setCenterPosition(orbitView.getCenterPosition());
            flatOrbitView.setZoom(orbitView.getZoom());
            flatOrbitView.setHeading(orbitView.getHeading());
            flatOrbitView.setPitch(orbitView.getPitch());
            wwCanvas.setView(flatOrbitView);
            // Change sky layer
            LayerList layers = wwCanvas.getModel().getLayers();
            for (int i = 0; i < layers.size(); i++) {
                if (layers.get(i) instanceof SkyGradientLayer) {
                    layers.set(i, new SkyColorLayer());
                }
            }
        }

        wwCanvas.redraw();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbProjection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rbGlobe;
    private javax.swing.JRadioButton rbMap;
    private gov.nasa.worldwind.awt.WorldWindowGLCanvas wwCanvas;
    // End of variables declaration//GEN-END:variables
}
