/*
 * Copyright 2014 Alessandro Falappa <alex.falappa@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.falappa.widgets.wwind;

import gov.nasa.worldwind.BasicModel;
import gov.nasa.worldwind.awt.WorldWindowGLCanvas;
import gov.nasa.worldwind.event.RenderingExceptionListener;
import gov.nasa.worldwind.exception.WWAbsentRequirementException;
import gov.nasa.worldwind.geom.Angle;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.geom.Sector;
import gov.nasa.worldwind.globes.Earth;
import gov.nasa.worldwind.globes.EarthFlat;
import gov.nasa.worldwind.globes.FlatGlobe;
import gov.nasa.worldwind.globes.Globe;
import gov.nasa.worldwind.layers.Layer;
import gov.nasa.worldwind.layers.LayerList;
import gov.nasa.worldwind.layers.ViewControlsLayer;
import gov.nasa.worldwind.layers.ViewControlsSelectListener;
import gov.nasa.worldwind.render.SurfaceShape;
import gov.nasa.worldwind.view.orbit.BasicOrbitView;
import gov.nasa.worldwindx.examples.util.StatusLayer;

/**
 * A base WorldWind panel with a top bar and
 * <p>
 * @author Alessandro Falappa <alex.falappa@gmail.com>
 */
public class WWindPanel extends javax.swing.JPanel {

    private final Globe roundGlobe = new Earth();
    private final FlatGlobe flatGlobe = new EarthFlat();

    public WWindPanel() {
        initComponents();
        setupWorldWind();
        globeSwitcher.setWorldWindow(wwCanvas);
    }

    public WorldWindowGLCanvas getWWCanvas() {
        return wwCanvas;
    }

    public void setBottomBar(boolean flag) {
        remove(pTop);
        add(pTop, java.awt.BorderLayout.PAGE_END);
    }

    public void addLayer(Layer layer) {
        wwCanvas.getModel().getLayers().add(layer);
    }

    public void redraw() {
        wwCanvas.redraw();
    }

    public void flyToSector(SurfaceShape shape) {
        Sector sector = Sector.boundingSector(shape.getLocations(wwCanvas.getModel().getGlobe()));
        double delta_x = sector.getDeltaLonRadians();
        double delta_y = sector.getDeltaLatRadians();
        double earthRadius = wwCanvas.getModel().getGlobe().getRadius();
        double horizDistance = earthRadius * delta_x;
        double vertDistance = earthRadius * delta_y;
        // Form a triangle consisting of the longest distance on the ground and the ray from the eye to the center point
        // The ray from the eye to the midpoint on the ground bisects the FOV
        double distance = Math.max(horizDistance, vertDistance) / 2;
        double altitude = distance / Math.tan(wwCanvas.getView().getFieldOfView().radians / 2);
        // double the altitude to leave some space around
        altitude *= 2;
        // fly to the calculated position
        Position pos = new Position(sector.getCentroid(), altitude);
        BasicOrbitView view = (BasicOrbitView) wwCanvas.getView();
        view.addPanToAnimator(pos, Angle.ZERO, Angle.ZERO, altitude);
        shape.setHighlighted(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pTop = new javax.swing.JPanel();
        globeSwitcher = new net.falappa.widgets.wwind.FlatRoundInLinePanel();
        wwCanvas = new gov.nasa.worldwind.awt.WorldWindowGLCanvas();

        setLayout(new java.awt.BorderLayout());

        pTop.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 3, 1));
        pTop.add(globeSwitcher);

        add(pTop, java.awt.BorderLayout.PAGE_START);
        add(wwCanvas, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private net.falappa.widgets.wwind.FlatRoundInLinePanel globeSwitcher;
    private javax.swing.JPanel pTop;
    private gov.nasa.worldwind.awt.WorldWindowGLCanvas wwCanvas;
    // End of variables declaration//GEN-END:variables

    private void setupWorldWind() {
        BasicModel model = new BasicModel();
        model.setGlobe(roundGlobe);
        wwCanvas.setModel(model);
        wwCanvas.setSize(400, 300);
        // Register a rendering exception listener
        wwCanvas.addRenderingExceptionListener(new RenderingExceptionListener() {
            @Override
            public void exceptionThrown(Throwable t) {
                if (t instanceof WWAbsentRequirementException) {
                    StringBuilder message = new StringBuilder(
                            "Computer does not meet minimum graphics requirements.\n");
                    message.append("Please install up-to-date graphics driver and try again.\n");
                    message.append("Reason: ").append(t.getMessage());
                    message.append("\nThis program will end when you press OK.");
//                    App.getFrame().showErrorDialog("Unable to Start Program", message.toString(), null);
                    System.exit(-1);
                } else {
                    System.err.println("WorldWind library rendering problem!");
                    t.printStackTrace(System.err);
                }
            }
        });
        LayerList layers = model.getLayers();
        // add a StatusLayer
        StatusLayer slayer = new StatusLayer();
        slayer.setEventSource(wwCanvas);
//        slayer.setDefaultFont(this.getFont());
        layers.add(slayer);
        // add a view controls layer and register a controller for it.
        ViewControlsLayer viewControlsLayer = new ViewControlsLayer();
        layers.add(viewControlsLayer);
        wwCanvas.addSelectListener(new ViewControlsSelectListener(wwCanvas, viewControlsLayer));
    }
}
