/*
 * Copyright 2014 Alessandro Falappa <alex.falappa@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gui.panels;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.swing.JSpinner;

import com.toedter.calendar.JTextFieldDateEditor;

/**
 *
 * @author Alessandro Falappa <alex.falappa@gmail.com>
 */
public class TimeWindowPanel extends javax.swing.JPanel {

    /**
     * Creates new form TimeWindowPanel
     */
    public TimeWindowPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chTimeEnabled = new javax.swing.JCheckBox();
        cbOper = new javax.swing.JComboBox();
        lT1 = new javax.swing.JLabel();
        lT2 = new javax.swing.JLabel();
        jdcT1 = new com.toedter.calendar.JDateChooser(new Date());
        jdcT2 = new com.toedter.calendar.JDateChooser(new Date());
        spT1Time = new javax.swing.JSpinner();
        spT2Time = new javax.swing.JSpinner();

        chTimeEnabled.setText("Time constraints");
        chTimeEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chTimeEnabledActionPerformed(evt);
            }
        });

        cbOper.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Contained in t1-t2", "Overlapping t1-t2", "After t1", "Before t1 " }));
        cbOper.setEnabled(false);
        cbOper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOperActionPerformed(evt);
            }
        });

        lT1.setText("t1");
        lT1.setEnabled(false);

        lT2.setText("t2");
        lT2.setEnabled(false);

        jdcT1.setDateFormatString("dd-MM-yyyy");
        jdcT1.setEnabled(false);
        ((JTextFieldDateEditor) jdcT1.getDateEditor().getUiComponent()).setColumns(12);
        jdcT1.getJCalendar().setWeekOfYearVisible(false);
        jdcT1.getJCalendar().setTodayButtonVisible(true);
        jdcT1.getJCalendar().setMaxDayCharacters(1);

        jdcT2.setDateFormatString("dd-MM-yyyy");
        jdcT2.setEnabled(false);
        ((JTextFieldDateEditor) jdcT2.getDateEditor().getUiComponent()).setColumns(12);
        jdcT2.getJCalendar().setWeekOfYearVisible(false);
        jdcT2.getJCalendar().setTodayButtonVisible(true);
        jdcT2.getJCalendar().setMaxDayCharacters(1);

        spT1Time.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));
        spT1Time.setEnabled(false);
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(spT1Time, "HH:mm:ss");
        spT1Time.setEditor(timeEditor);

        spT2Time.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));
        spT2Time.setEnabled(false);
        JSpinner.DateEditor timeEditor2 = new JSpinner.DateEditor(spT2Time, "HH:mm:ss");
        spT2Time.setEditor(timeEditor2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbOper, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(12, 12, 12))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lT1)
                                    .addComponent(lT2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jdcT2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(spT1Time, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                                            .addComponent(jdcT1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(4, 4, 4))
                                    .addComponent(spT2Time))
                                .addGap(11, 11, 11))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chTimeEnabled)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chTimeEnabled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbOper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcT1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lT1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spT1Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcT2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lT2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spT2Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chTimeEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chTimeEnabledActionPerformed
        boolean flag = chTimeEnabled.isSelected();
        cbOper.setEnabled(flag);
        enableT1(flag);
        enableT2(flag && cbOper.getSelectedIndex() < 2);
    }//GEN-LAST:event_chTimeEnabledActionPerformed

    private void enableT2(boolean flag) {
        lT2.setEnabled(flag);
        jdcT2.setEnabled(flag);
        spT2Time.setEnabled(flag);
    }

    private void enableT1(boolean flag) {
        lT1.setEnabled(flag);
        jdcT1.setEnabled(flag);
        spT1Time.setEnabled(flag);
    }

    private void cbOperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOperActionPerformed
        enableT2(cbOper.getSelectedIndex() < 2);
    }//GEN-LAST:event_cbOperActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbOper;
    private javax.swing.JCheckBox chTimeEnabled;
    private com.toedter.calendar.JDateChooser jdcT1;
    private com.toedter.calendar.JDateChooser jdcT2;
    private javax.swing.JLabel lT1;
    private javax.swing.JLabel lT2;
    private javax.swing.JSpinner spT1Time;
    private javax.swing.JSpinner spT2Time;
    // End of variables declaration//GEN-END:variables

    public boolean constraintsEnabled() {
        return chTimeEnabled.isSelected();
    }

    public int getOperator() {
        return cbOper.getSelectedIndex();
    }

    public Date getT1() {
        Calendar calDate = new GregorianCalendar();
        calDate.setTime(jdcT1.getDate());
        Calendar calTime = new GregorianCalendar();
        calTime.setTime((Date) spT1Time.getValue());
        calTime.set(calDate.get(Calendar.YEAR), calDate.get(Calendar.MONTH), calDate.get(Calendar.DAY_OF_MONTH));
        return calTime.getTime();
    }

    public Date getT2() {
        Calendar calDate = new GregorianCalendar();
        calDate.setTime(jdcT2.getDate());
        Calendar calTime = new GregorianCalendar();
        calTime.setTime((Date) spT2Time.getValue());
        calTime.set(calDate.get(Calendar.YEAR), calDate.get(Calendar.MONTH), calDate.get(Calendar.DAY_OF_MONTH));
        return calTime.getTime();
    }
}
